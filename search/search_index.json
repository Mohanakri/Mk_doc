{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"part1_Objects/","title":"JavaScript Objects - Quick Reference Notes","text":""},{"location":"part1_Objects/#1-objects","title":"1. Objects","text":""},{"location":"part1_Objects/#object-creation","title":"Object Creation","text":"<pre><code>// Object literal (preferred)\nlet user = {\n  name: \"John\",\n  age: 30,\n  \"likes birds\": true  // multiword property names must be quoted\n};\n\n// Object constructor\nlet user = new Object();\n</code></pre>"},{"location":"part1_Objects/#property-access","title":"Property Access","text":"<pre><code>// Dot notation (for valid identifiers)\nuser.name;\nuser.age = 25;\n\n// Square bracket notation (for any string)\nuser[\"likes birds\"];\nuser[key] = value;  // dynamic key\n\n// Delete properties\ndelete user.age;\n</code></pre>"},{"location":"part1_Objects/#computed-properties","title":"Computed Properties","text":"<pre><code>let fruit = \"apple\";\nlet bag = {\n  [fruit]: 5,           // property name from variable\n  [fruit + \"s\"]: 10     // computed expression\n};\n</code></pre>"},{"location":"part1_Objects/#property-shortcuts","title":"Property Shortcuts","text":"<pre><code>function makeUser(name, age) {\n  return {\n    name,    // same as name: name\n    age      // same as age: age\n  };\n}\n</code></pre>"},{"location":"part1_Objects/#property-existence","title":"Property Existence","text":"<pre><code>// Check if property exists\n\"age\" in user;              // true/false\nuser.noSuchProperty === undefined;  // true if doesn't exist\n\n// Loop through properties\nfor (let key in user) {\n  console.log(key, user[key]);\n}\n</code></pre>"},{"location":"part1_Objects/#property-ordering","title":"Property Ordering","text":"<ul> <li>Integer properties: Sorted numerically</li> <li>Other properties: Creation order</li> <li>Tip: Use <code>\"+1\", \"+2\"</code> to maintain order for numeric strings</li> </ul>"},{"location":"part1_Objects/#2-object-copying-references","title":"2. Object Copying &amp; References","text":""},{"location":"part1_Objects/#reference-behavior","title":"Reference Behavior","text":"<pre><code>let user = { name: \"John\" };\nlet admin = user;        // Copy reference, not object\nadmin.name = \"Pete\";     // Changes original object\nconsole.log(user.name);  // \"Pete\"\n</code></pre>"},{"location":"part1_Objects/#object-comparison","title":"Object Comparison","text":"<ul> <li>Objects compared by reference, not content</li> <li><code>{}</code> \u2260 <code>{}</code> (different objects)</li> <li>Same object: <code>a === b</code> only if <code>a</code> and <code>b</code> reference same object</li> </ul>"},{"location":"part1_Objects/#shallow-cloning","title":"Shallow Cloning","text":"<pre><code>// Manual clone\nlet clone = {};\nfor (let key in user) {\n  clone[key] = user[key];\n}\n\n// Object.assign\nlet clone = Object.assign({}, user);\n\n// Spread operator\nlet clone = {...user};\n</code></pre>"},{"location":"part1_Objects/#deep-cloning","title":"Deep Cloning","text":"<pre><code>// Built-in deep clone (modern)\nlet clone = structuredClone(user);\n\n// Limitations: doesn't work with functions, some objects\n// Alternative: Lodash _.cloneDeep()\n</code></pre>"},{"location":"part1_Objects/#const-objects","title":"const Objects","text":"<pre><code>const user = { name: \"John\" };\nuser.name = \"Pete\";  // \u2705 Properties can be modified\nuser = {};           // \u274c Can't reassign the object\n</code></pre>"},{"location":"part1_Objects/#3-garbage-collection","title":"3. Garbage Collection","text":""},{"location":"part1_Objects/#reachability-concept","title":"Reachability Concept","text":"<ul> <li>Reachable values: Accessible from roots via references</li> <li>Roots: Global variables, local variables, parameters, functions</li> <li>Unreachable objects: Automatically removed by garbage collector</li> </ul>"},{"location":"part1_Objects/#mark-and-sweep-algorithm","title":"Mark-and-Sweep Algorithm","text":"<ol> <li>Mark: Start from roots, mark all reachable objects</li> <li>Sweep: Remove all unmarked objects</li> <li>Optimizations: </li> <li>Generational collection (new vs old objects)</li> <li>Incremental collection (small chunks)</li> <li>Idle-time collection</li> </ol>"},{"location":"part1_Objects/#key-points","title":"Key Points","text":"<ul> <li>Automatic process, can't force or prevent</li> <li>Referenced \u2260 reachable (circular references can be unreachable)</li> <li>Modern engines use advanced optimizations</li> </ul>"},{"location":"part1_Objects/#4-object-methods-this","title":"4. Object Methods &amp; \"this\"","text":""},{"location":"part1_Objects/#method-definition","title":"Method Definition","text":"<pre><code>let user = {\n  name: \"John\",\n\n  // Method syntax\n  sayHi() {\n    console.log(`Hello, ${this.name}!`);\n  },\n\n  // Function property\n  sayBye: function() {\n    console.log(\"Goodbye!\");\n  }\n};\n</code></pre>"},{"location":"part1_Objects/#this-keyword","title":"\"this\" Keyword","text":"<ul> <li>In methods: <code>this</code> = object before the dot</li> <li>Dynamic binding: Value determined at call time</li> <li>No binding: <code>this</code> is undefined in strict mode when called without object</li> </ul> <pre><code>let user = { name: \"John\" };\nlet admin = { name: \"Admin\" };\n\nfunction sayHi() {\n  console.log(this.name);\n}\n\nuser.f = sayHi;\nadmin.f = sayHi;\n\nuser.f();   // \"John\" (this = user)\nadmin.f();  // \"Admin\" (this = admin)\nsayHi();    // undefined (no object context)\n</code></pre>"},{"location":"part1_Objects/#arrow-functions-this","title":"Arrow Functions &amp; \"this\"","text":"<ul> <li>No own \"this\": Takes <code>this</code> from enclosing scope</li> <li>Useful: When you don't want separate <code>this</code></li> </ul> <pre><code>let user = {\n  name: \"John\",\n  sayHi() {\n    let arrow = () =&gt; console.log(this.name);\n    arrow();  // \"John\" (takes this from sayHi)\n  }\n};\n</code></pre>"},{"location":"part1_Objects/#5-constructor-functions-new","title":"5. Constructor Functions &amp; \"new\"","text":""},{"location":"part1_Objects/#constructor-function","title":"Constructor Function","text":"<pre><code>function User(name) {\n  this.name = name;\n  this.isAdmin = false;\n\n  this.sayHi = function() {\n    console.log(`Hi, ${this.name}!`);\n  };\n}\n\nlet user = new User(\"John\");\n</code></pre>"},{"location":"part1_Objects/#new-operator-steps","title":"\"new\" Operator Steps","text":"<ol> <li>Creates empty object <code>{}</code></li> <li>Sets <code>this</code> to the new object</li> <li>Executes function body</li> <li>Returns <code>this</code> (unless function explicitly returns object)</li> </ol>"},{"location":"part1_Objects/#constructor-rules","title":"Constructor Rules","text":"<ul> <li>Naming: Capital letter first (<code>User</code>, not <code>user</code>)</li> <li>Usage: Only with <code>new</code> operator</li> <li>Return: </li> <li>Object return \u2192 that object returned</li> <li>Primitive return \u2192 ignored, <code>this</code> returned</li> </ul>"},{"location":"part1_Objects/#newtarget","title":"new.target","text":"<pre><code>function User(name) {\n  if (!new.target) {\n    return new User(name);  // Fix missing \"new\"\n  }\n  this.name = name;\n}\n</code></pre>"},{"location":"part1_Objects/#immediate-constructor","title":"Immediate Constructor","text":"<pre><code>let user = new function() {\n  this.name = \"John\";\n  this.isAdmin = false;\n  // Complex initialization logic...\n};\n</code></pre>"},{"location":"part1_Objects/#6-optional-chaining","title":"6. Optional Chaining (?.)","text":""},{"location":"part1_Objects/#basic-syntax","title":"Basic Syntax","text":"<pre><code>// Safe property access\nuser?.address?.street;     // undefined if any part is null/undefined\n\n// Safe method calls\nuser.admin?.();            // only calls if admin exists\n\n// Safe bracket access\nuser?.[key];               // dynamic property access\n</code></pre>"},{"location":"part1_Objects/#problem-it-solves","title":"Problem It Solves","text":"<pre><code>// Before optional chaining\nlet street = user.address ? user.address.street : undefined;\n\n// With optional chaining\nlet street = user?.address?.street;\n</code></pre>"},{"location":"part1_Objects/#three-forms","title":"Three Forms","text":"<ol> <li>Property: <code>obj?.prop</code></li> <li>Method: <code>obj.method?.()</code> </li> <li>Bracket: <code>obj?.[prop]</code></li> </ol>"},{"location":"part1_Objects/#important-notes","title":"Important Notes","text":"<ul> <li>Short-circuit: Stops evaluation if left part is null/undefined</li> <li>No assignment: Can't use <code>?.</code> on left side of assignment</li> <li>Variable must be declared: <code>user?.address</code> (not <code>undeclaredVar?.prop</code>)</li> </ul>"},{"location":"part1_Objects/#7-symbols","title":"7. Symbols","text":""},{"location":"part1_Objects/#symbol-creation","title":"Symbol Creation","text":"<pre><code>let id = Symbol();           // Unique symbol\nlet id = Symbol(\"id\");       // Symbol with description\n</code></pre>"},{"location":"part1_Objects/#key-properties","title":"Key Properties","text":"<ul> <li>Always unique: Even with same description</li> <li>No auto-conversion: Must use <code>.toString()</code> or <code>.description</code></li> </ul> <pre><code>let id1 = Symbol(\"id\");\nlet id2 = Symbol(\"id\");\nconsole.log(id1 === id2);    // false\n\n// Access description\nconsole.log(id1.description); // \"id\"\nconsole.log(id1.toString());  // \"Symbol(id)\"\n</code></pre>"},{"location":"part1_Objects/#hidden-properties","title":"Hidden Properties","text":"<pre><code>let user = { name: \"John\" };\nlet id = Symbol(\"id\");\n\nuser[id] = 123;              // Won't conflict with string keys\nconsole.log(user[id]);       // 123\n\n// Symbols skipped in for...in and Object.keys()\nfor (let key in user) {\n  console.log(key);          // Only \"name\", not symbol\n}\n</code></pre>"},{"location":"part1_Objects/#object-literal-usage","title":"Object Literal Usage","text":"<pre><code>let id = Symbol(\"id\");\nlet user = {\n  name: \"John\",\n  [id]: 123    // Must use brackets, not id: 123\n};\n</code></pre>"},{"location":"part1_Objects/#global-symbol-registry","title":"Global Symbol Registry","text":"<pre><code>// Create/get global symbol\nlet id = Symbol.for(\"id\");\nlet sameId = Symbol.for(\"id\");\nconsole.log(id === sameId);      // true\n\n// Get key for global symbol\nconsole.log(Symbol.keyFor(id));  // \"id\"\n\n// Non-global symbols return undefined\nlet local = Symbol(\"local\");\nconsole.log(Symbol.keyFor(local)); // undefined\n</code></pre>"},{"location":"part1_Objects/#system-symbols","title":"System Symbols","text":"<ul> <li><code>Symbol.toPrimitive</code>: Object-to-primitive conversion</li> <li><code>Symbol.iterator</code>: Iterator protocol</li> <li><code>Symbol.hasInstance</code>: instanceof behavior</li> <li>Many others for language internals</li> </ul>"},{"location":"part1_Objects/#8-object-to-primitive-conversion","title":"8. Object-to-Primitive Conversion","text":""},{"location":"part1_Objects/#conversion-hints","title":"Conversion Hints","text":"<ol> <li>\"string\": For <code>alert(obj)</code>, template literals, property keys</li> <li>\"number\": For math operations, explicit conversion</li> <li>\"default\": For <code>+</code>, <code>==</code>, rare cases (most objects treat as \"number\")</li> </ol>"},{"location":"part1_Objects/#conversion-algorithm","title":"Conversion Algorithm","text":"<ol> <li>Try: <code>obj[Symbol.toPrimitive](hint)</code></li> <li>For \"string\": <code>toString()</code> \u2192 <code>valueOf()</code> </li> <li>For \"number\"/\"default\": <code>valueOf()</code> \u2192 <code>toString()</code></li> </ol>"},{"location":"part1_Objects/#symboltoprimitive-method","title":"Symbol.toPrimitive Method","text":"<pre><code>let user = {\n  name: \"John\",\n  money: 1000,\n\n  [Symbol.toPrimitive](hint) {\n    console.log(`hint: ${hint}`);\n    return hint === \"string\" ? `{name: \"${this.name}\"}` : this.money;\n  }\n};\n\nalert(user);        // hint: string \u2192 {name: \"John\"}\nconsole.log(+user); // hint: number \u2192 1000\nconsole.log(user + 500); // hint: default \u2192 1500\n</code></pre>"},{"location":"part1_Objects/#tostringvalueof-methods","title":"toString/valueOf Methods","text":"<pre><code>let user = {\n  name: \"John\",\n  money: 1000,\n\n  toString() {\n    return `{name: \"${this.name}\"}`;\n  },\n\n  valueOf() {\n    return this.money;\n  }\n};\n\nalert(user);        // toString \u2192 {name: \"John\"}\nconsole.log(+user); // valueOf \u2192 1000\nconsole.log(user + 500); // valueOf \u2192 1500\n</code></pre>"},{"location":"part1_Objects/#catch-all-tostring","title":"Catch-All toString","text":"<pre><code>let user = {\n  name: \"John\",\n\n  toString() {\n    return this.name;\n  }\n};\n\nalert(user);        // John\nconsole.log(user + 500); // John500 (string concatenation)\n</code></pre>"},{"location":"part1_Objects/#conversion-rules","title":"Conversion Rules","text":"<ul> <li>Must return primitive: Objects ignored (except Symbol.toPrimitive throws error)</li> <li>Any primitive type: Doesn't have to match hint</li> <li>Further conversion: Result may be converted again (<code>\"2\" * 2</code> \u2192 <code>4</code>)</li> </ul>"},{"location":"part1_Objects/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"part1_Objects/#object-creation_1","title":"Object Creation","text":"<ul> <li>Use object literals <code>{}</code> over <code>new Object()</code></li> <li>Use computed properties for dynamic keys</li> <li>Prefer method shorthand: <code>method() {}</code> over <code>method: function() {}</code></li> </ul>"},{"location":"part1_Objects/#property-access_1","title":"Property Access","text":"<ul> <li>Use dot notation for simple properties</li> <li>Use brackets for dynamic keys or special characters</li> <li>Use <code>in</code> operator for existence checks</li> </ul>"},{"location":"part1_Objects/#object-copying","title":"Object Copying","text":"<ul> <li>Use <code>structuredClone()</code> for deep copying (modern)</li> <li>Use <code>Object.assign()</code> or spread <code>{...obj}</code> for shallow copying</li> <li>Be aware of reference vs value semantics</li> </ul>"},{"location":"part1_Objects/#methods-this","title":"Methods &amp; \"this\"","text":"<ul> <li>Understand dynamic <code>this</code> binding</li> <li>Use arrow functions when you want lexical <code>this</code></li> <li>Be careful with method extraction</li> </ul>"},{"location":"part1_Objects/#constructors","title":"Constructors","text":"<ul> <li>Use capital letters for constructor names</li> <li>Always use with <code>new</code> operator</li> <li>Consider using classes for complex objects</li> </ul>"},{"location":"part1_Objects/#modern-features","title":"Modern Features","text":"<ul> <li>Use optional chaining <code>?.</code> for safe property access</li> <li>Use symbols for hidden/unique properties</li> <li>Implement <code>Symbol.toPrimitive</code> for custom conversions</li> </ul>"},{"location":"part1_Objects/#memory-management","title":"Memory Management","text":"<ul> <li>Don't worry about garbage collection in normal code</li> <li>Avoid circular references when possible</li> <li>Understand reachability concept for debugging</li> </ul>"},{"location":"part1_fundamentals/","title":"JavaScript Basics - Quick Reference Notes","text":""},{"location":"part1_fundamentals/#1-hello-world","title":"1. Hello World","text":"<ul> <li>Script Tag: <code>&lt;script&gt;</code> tag contains JavaScript code</li> <li>External Scripts: Use <code>src</code> attribute: <code>&lt;script src=\"path/to/script.js\"&gt;&lt;/script&gt;</code></li> <li>Modern Markup: <code>type</code> and <code>language</code> attributes are optional</li> <li>Important: Can't have both <code>src</code> and inline code in same <code>&lt;script&gt;</code> tag</li> </ul>"},{"location":"part1_fundamentals/#2-code-structure","title":"2. Code Structure","text":""},{"location":"part1_fundamentals/#statements","title":"Statements","text":"<ul> <li>Commands that perform actions</li> <li>Separated by semicolons (<code>;</code>)</li> <li>Usually written on separate lines for readability</li> </ul>"},{"location":"part1_fundamentals/#semicolons","title":"Semicolons","text":"<ul> <li>Can be omitted when line break exists (automatic insertion)</li> <li>Recommended: Always use semicolons to avoid errors</li> <li>JavaScript may not assume semicolon in all cases</li> </ul>"},{"location":"part1_fundamentals/#comments","title":"Comments","text":"<ul> <li>Single line: <code>// comment</code></li> <li>Multi-line: <code>/* comment */</code></li> <li>Can't nest multi-line comments</li> </ul>"},{"location":"part1_fundamentals/#3-strict-mode","title":"3. Strict Mode","text":"<ul> <li>Enable: <code>\"use strict\";</code> at top of script or function</li> <li>Enables modern JavaScript behavior</li> <li>Makes code more secure and catches errors</li> <li>Modern: Classes and modules enable strict mode automatically</li> <li>Console: Use <code>'use strict';</code> in developer console</li> </ul>"},{"location":"part1_fundamentals/#4-variables","title":"4. Variables","text":""},{"location":"part1_fundamentals/#declaration","title":"Declaration","text":"<ul> <li>Modern: <code>let variableName;</code></li> <li>Old: <code>var variableName;</code> (avoid in new code)</li> <li>Constants: <code>const CONSTANT_NAME = value;</code></li> </ul>"},{"location":"part1_fundamentals/#naming-rules","title":"Naming Rules","text":"<ul> <li>Letters, digits, <code>$</code>, <code>_</code> allowed</li> <li>Can't start with digit</li> <li>Case-sensitive</li> <li>Use camelCase convention</li> <li>Reserved words not allowed</li> </ul>"},{"location":"part1_fundamentals/#variable-types","title":"Variable Types","text":"<ul> <li>Global: Declared outside functions</li> <li>Local: Declared inside functions</li> <li>Good Practice: Minimize global variables</li> </ul>"},{"location":"part1_fundamentals/#5-data-types","title":"5. Data Types","text":""},{"location":"part1_fundamentals/#primitive-types-7","title":"Primitive Types (7)","text":"<ol> <li>number: Integers and floats, <code>Infinity</code>, <code>-Infinity</code>, <code>NaN</code></li> <li>bigint: Large integers with <code>n</code> suffix: <code>123n</code></li> <li>string: Text in quotes (<code>\"</code>, <code>'</code>, <code>`</code>)</li> <li>boolean: <code>true</code> or <code>false</code></li> <li>null: Represents \"nothing\" or \"unknown\"</li> <li>undefined: Variable declared but not assigned</li> <li>symbol: Unique identifiers</li> </ol>"},{"location":"part1_fundamentals/#non-primitive","title":"Non-Primitive","text":"<ul> <li>object: Complex data structures</li> </ul>"},{"location":"part1_fundamentals/#typeof-operator","title":"typeof Operator","text":"<pre><code>typeof undefined  // \"undefined\"\ntypeof 0         // \"number\"\ntypeof true      // \"boolean\"\ntypeof \"foo\"     // \"string\"\ntypeof null      // \"object\" (known bug)\n</code></pre>"},{"location":"part1_fundamentals/#6-user-interaction","title":"6. User Interaction","text":""},{"location":"part1_fundamentals/#alert","title":"Alert","text":"<ul> <li><code>alert(\"message\");</code> - Shows message, waits for OK</li> </ul>"},{"location":"part1_fundamentals/#prompt","title":"Prompt","text":"<ul> <li><code>prompt(\"question\", defaultValue);</code></li> <li>Returns user input or <code>null</code> if canceled</li> </ul>"},{"location":"part1_fundamentals/#confirm","title":"Confirm","text":"<ul> <li><code>confirm(\"question\");</code></li> <li>Returns <code>true</code> (OK) or <code>false</code> (Cancel)</li> </ul> <p>All are modal - block interaction with page until dismissed.</p>"},{"location":"part1_fundamentals/#7-type-conversions","title":"7. Type Conversions","text":""},{"location":"part1_fundamentals/#string-conversion","title":"String Conversion","text":"<ul> <li><code>String(value)</code> or <code>alert(value)</code></li> <li><code>false</code> \u2192 <code>\"false\"</code>, <code>null</code> \u2192 <code>\"null\"</code></li> </ul>"},{"location":"part1_fundamentals/#numeric-conversion","title":"Numeric Conversion","text":"<ul> <li><code>Number(value)</code> or math operations</li> <li><code>undefined</code> \u2192 <code>NaN</code>, <code>null</code> \u2192 <code>0</code></li> <li><code>true/false</code> \u2192 <code>1/0</code></li> <li>Empty string \u2192 <code>0</code>, non-numbers \u2192 <code>NaN</code></li> </ul>"},{"location":"part1_fundamentals/#boolean-conversion","title":"Boolean Conversion","text":"<ul> <li><code>Boolean(value)</code></li> <li>Falsy: <code>0</code>, <code>\"\"</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code> \u2192 <code>false</code></li> <li>Everything else \u2192 <code>true</code></li> <li>Note: <code>\"0\"</code> and <code>\" \"</code> are <code>true</code></li> </ul>"},{"location":"part1_fundamentals/#8-operators","title":"8. Operators","text":""},{"location":"part1_fundamentals/#arithmetic","title":"Arithmetic","text":"<ul> <li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> (remainder), <code>**</code> (exponentiation)</li> <li>String Concatenation: <code>+</code> with strings</li> <li>Unary Plus: <code>+value</code> converts to number</li> </ul>"},{"location":"part1_fundamentals/#assignment","title":"Assignment","text":"<ul> <li><code>=</code> returns assigned value</li> <li>Chaining: <code>a = b = c = 5</code></li> <li>Modify-in-place: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code></li> </ul>"},{"location":"part1_fundamentals/#incrementdecrement","title":"Increment/Decrement","text":"<ul> <li>Postfix: <code>counter++</code> (returns old value)</li> <li>Prefix: <code>++counter</code> (returns new value)</li> </ul>"},{"location":"part1_fundamentals/#operator-precedence","title":"Operator Precedence","text":"<ul> <li>Unary (<code>+</code>, <code>-</code>) &gt; Arithmetic &gt; Assignment</li> <li>Use parentheses for clarity</li> </ul>"},{"location":"part1_fundamentals/#9-comparisons","title":"9. Comparisons","text":""},{"location":"part1_fundamentals/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code></li> </ul>"},{"location":"part1_fundamentals/#string-comparison","title":"String Comparison","text":"<ul> <li>Lexicographic (dictionary) order</li> <li>Compare character by character</li> </ul>"},{"location":"part1_fundamentals/#type-coercion","title":"Type Coercion","text":"<ul> <li><code>==</code> converts types before comparing</li> <li><code>===</code> strict equality (no conversion)</li> <li>Rule: Always use <code>===</code> and <code>!==</code></li> </ul>"},{"location":"part1_fundamentals/#special-cases","title":"Special Cases","text":"<ul> <li><code>null == undefined</code> \u2192 <code>true</code></li> <li><code>null === undefined</code> \u2192 <code>false</code></li> <li>Comparisons with <code>null</code>/<code>undefined</code> can be tricky</li> </ul>"},{"location":"part1_fundamentals/#10-conditional-statements","title":"10. Conditional Statements","text":""},{"location":"part1_fundamentals/#ifelse","title":"if/else","text":"<pre><code>if (condition) {\n  // code\n} else if (anotherCondition) {\n  // code  \n} else {\n  // code\n}\n</code></pre>"},{"location":"part1_fundamentals/#conditional-operator-ternary","title":"Conditional Operator (Ternary)","text":"<pre><code>let result = condition ? value1 : value2;\n</code></pre>"},{"location":"part1_fundamentals/#11-logical-operators","title":"11. Logical Operators","text":""},{"location":"part1_fundamentals/#and","title":"AND (<code>&amp;&amp;</code>)","text":"<ul> <li>Returns first falsy or last value</li> <li>Short-circuit evaluation</li> </ul>"},{"location":"part1_fundamentals/#or","title":"OR (<code>||</code>)","text":"<ul> <li>Returns first truthy or last value</li> <li>Often used for default values</li> </ul>"},{"location":"part1_fundamentals/#not","title":"NOT (<code>!</code>)","text":"<ul> <li>Converts to boolean and reverses</li> <li><code>!!value</code> converts to boolean</li> </ul>"},{"location":"part1_fundamentals/#12-nullish-coalescing","title":"12. Nullish Coalescing (<code>??</code>)","text":"<ul> <li>Returns right operand if left is <code>null</code> or <code>undefined</code></li> <li>Different from <code>||</code> which checks for any falsy value</li> <li><code>a ?? b</code> - use <code>b</code> only if <code>a</code> is <code>null</code>/<code>undefined</code></li> </ul>"},{"location":"part1_fundamentals/#13-loops","title":"13. Loops","text":""},{"location":"part1_fundamentals/#while","title":"while","text":"<pre><code>while (condition) {\n  // code\n}\n</code></pre>"},{"location":"part1_fundamentals/#dowhile","title":"do...while","text":"<pre><code>do {\n  // code\n} while (condition);\n</code></pre>"},{"location":"part1_fundamentals/#for","title":"for","text":"<pre><code>for (let i = 0; i &lt; 10; i++) {\n  // code\n}\n</code></pre>"},{"location":"part1_fundamentals/#loop-control","title":"Loop Control","text":"<ul> <li><code>break</code> - exit loop</li> <li><code>continue</code> - skip to next iteration</li> <li>Labels for nested loops: <code>outer: for(...)</code></li> </ul>"},{"location":"part1_fundamentals/#14-switch-statement","title":"14. Switch Statement","text":"<p><pre><code>switch (expression) {\n  case value1:\n    // code\n    break;\n  case value2:\n  case value3:\n    // code for both value2 and value3\n    break;\n  default:\n    // default code\n}\n</code></pre> - Uses strict equality (<code>===</code>) - <code>break</code> prevents fall-through - Grouping cases possible</p>"},{"location":"part1_fundamentals/#15-functions","title":"15. Functions","text":""},{"location":"part1_fundamentals/#function-declaration","title":"Function Declaration","text":"<pre><code>function functionName(param1, param2) {\n  // code\n  return value; // optional\n}\n</code></pre>"},{"location":"part1_fundamentals/#key-concepts","title":"Key Concepts","text":"<ul> <li>Local Variables: Only visible inside function</li> <li>Outer Variables: Functions can access and modify them</li> <li>Parameters: Copied values, changes don't affect original</li> <li>Return: Function stops and returns value (default: <code>undefined</code>)</li> </ul>"},{"location":"part1_fundamentals/#default-parameters","title":"Default Parameters","text":"<pre><code>function greet(name = \"Guest\") {\n  alert(`Hello, ${name}!`);\n}\n</code></pre>"},{"location":"part1_fundamentals/#function-naming","title":"Function Naming","text":"<ul> <li>Use verbs: <code>showMessage</code>, <code>getData</code>, <code>calcSum</code></li> <li>Be descriptive and brief</li> <li>One function = one action</li> </ul>"},{"location":"part1_fundamentals/#16-function-expressions","title":"16. Function Expressions","text":""},{"location":"part1_fundamentals/#syntax","title":"Syntax","text":"<pre><code>let functionName = function(params) {\n  // code\n};\n</code></pre>"},{"location":"part1_fundamentals/#key-differences-from-declarations","title":"Key Differences from Declarations","text":"<ul> <li>Created when execution reaches it</li> <li>Can be assigned to variables</li> <li>Can be passed as arguments</li> <li>Hoisting: Declarations are hoisted, expressions are not</li> </ul>"},{"location":"part1_fundamentals/#17-arrow-functions","title":"17. Arrow Functions","text":""},{"location":"part1_fundamentals/#basic-syntax","title":"Basic Syntax","text":"<pre><code>let func = (param1, param2) =&gt; {\n  return param1 + param2;\n};\n\n// Short form for single expression\nlet func = (param1, param2) =&gt; param1 + param2;\n\n// Single parameter (parentheses optional)\nlet func = param =&gt; param * 2;\n\n// No parameters\nlet func = () =&gt; alert(\"Hello\");\n</code></pre>"},{"location":"part1_fundamentals/#characteristics","title":"Characteristics","text":"<ul> <li>More concise syntax</li> <li>No own <code>this</code> binding</li> <li>Can't be used as constructors</li> <li>Good for short functions and callbacks</li> </ul>"},{"location":"part1_fundamentals/#18-javascript-specials-summary","title":"18. JavaScript Specials Summary","text":""},{"location":"part1_fundamentals/#code-structure","title":"Code Structure","text":"<ul> <li>Statements end with <code>;</code></li> <li>Blocks use <code>{...}</code></li> <li><code>use strict</code> enables modern mode</li> </ul>"},{"location":"part1_fundamentals/#variables","title":"Variables","text":"<ul> <li><code>let</code>, <code>const</code> (modern), <code>var</code> (old)</li> <li>Dynamic typing</li> <li>8 data types (7 primitive + object)</li> </ul>"},{"location":"part1_fundamentals/#functions","title":"Functions","text":"<ul> <li>Three ways: declaration, expression, arrow</li> <li>Parameters and return values</li> <li>Local vs outer variables</li> </ul>"},{"location":"part1_fundamentals/#key-modern-features","title":"Key Modern Features","text":"<ul> <li>Template literals: <code>`Hello ${name}`</code></li> <li>Default parameters</li> <li>Arrow functions</li> <li><code>let</code>/<code>const</code> instead of <code>var</code></li> <li>Strict equality (<code>===</code>)</li> <li>Nullish coalescing (<code>??</code>)</li> </ul>"},{"location":"part1_fundamentals/#best-practices-summary","title":"Best Practices Summary","text":"<ol> <li>Always use <code>\"use strict\"</code></li> <li>Use <code>let</code>/<code>const</code>, avoid <code>var</code></li> <li>Use <code>===</code> instead of <code>==</code></li> <li>Always use semicolons</li> <li>Choose descriptive variable/function names</li> <li>One function = one action</li> <li>Minimize global variables</li> <li>Comment your code</li> <li>Use modern ES6+ features</li> <li>Handle edge cases (null, undefined)</li> </ol>"},{"location":"Interview/Cheatsheeta_%26_QA/","title":"check","text":"<p>https://www.interviewbit.com/javascript-interview-questions/</p> <p>cheatsheets:</p> <p>https://zerotomastery.io/cheatsheets/javascript-cheatsheet-the-advanced-concepts/</p> <p>https://zerotomastery.io/cheatsheets/react-cheat-sheet/</p> <p>https://zerotomastery.io/cheatsheets/big-o-cheat-sheet/</p> <p>https://zerotomastery.io/cheatsheets/ui-ux-design-cheat-sheet/</p> <p>https://zerotomastery.io/cheatsheets/node-js-cheat-sheet/</p> <p>https://zerotomastery.io/cheatsheets/data-structures-and-algorithms-cheat-sheet/</p>"},{"location":"Interview/empty_js/","title":"Empty js","text":"<p>Good question \ud83d\udc4d Let\u2019s walk step by step about what happens in the background when JavaScript executes an empty file (or even before running any code).</p>"},{"location":"Interview/empty_js/#1-javascript-execution-context-creation","title":"1. JavaScript Execution Context Creation","text":"<p>Whenever JavaScript starts execution, it first creates a Global Execution Context (GEC). Even if your file is empty, this step still happens.</p> <ul> <li> <p>Memory phase (a.k.a. Creation phase / Hoisting phase):   JS sets up a global object and environment to store variables and functions.</p> </li> <li> <p>In browser \u2192 the global object is <code>window</code></p> </li> <li> <p>In Node.js \u2192 the global object is <code>global</code></p> </li> <li> <p>A special object called <code>this</code> is created and points to the global object.</p> </li> <li> <p>A memory space (heap + stack) is created for variables/functions (currently empty if file has no code).</p> </li> </ul>"},{"location":"Interview/empty_js/#2-call-stack-initialization","title":"2. Call Stack Initialization","text":"<p>The call stack (Execution Stack) is created.</p> <ul> <li>The very first thing pushed is the Global Execution Context.</li> <li>If you don\u2019t have any functions in your code, nothing else gets pushed.</li> <li>Once execution finishes, the Global Execution Context eventually gets popped off (but in reality, it stays alive until your script ends).</li> </ul>"},{"location":"Interview/empty_js/#3-hoisting-pre-scan","title":"3. Hoisting (Pre-scan)","text":"<p>Even in an empty file:</p> <ul> <li>JS engine scans for variables/functions to allocate memory.</li> <li>Since it\u2019s empty, no variables/functions get hoisted.</li> </ul>"},{"location":"Interview/empty_js/#4-code-execution-phase","title":"4. Code Execution Phase","text":"<ul> <li>Since there\u2019s no actual code, the execution phase does nothing.</li> </ul>"},{"location":"Interview/empty_js/#5-background-runtime-environment-setup","title":"5. Background (Runtime Environment) Setup","text":"<p>Even for an empty file, the JS engine sets up:</p> <ul> <li>Memory Heap \u2192 for objects (empty right now)</li> <li>Call Stack \u2192 with one GEC</li> <li>Event Loop &amp; Callback Queue \u2192 ready to handle events, timers, promises, etc.</li> </ul> <p>That\u2019s why if you later write code like <code>setTimeout(...)</code> or <code>fetch(...)</code>, it will work \u2014 the background infrastructure is already prepared.</p> <p>\u2705 So, in short: When JS runs an empty file, behind the scenes the engine still:</p> <ol> <li>Creates the Global Execution Context</li> <li>Allocates memory space (nothing inside yet)</li> <li>Initializes the call stack with GEC</li> <li>Prepares runtime environment (heap, event loop, callback queue)</li> </ol>"},{"location":"Interview/empty_js/#do-you-want-me-to-draw-a-diagram-showing-how-memory-call-stack-event-loop-look-when-running-an-empty-js-file","title":"Do you want me to draw a diagram showing how memory + call stack + event loop look when running an empty JS file?","text":"<p>Great, you\u2019re digging into the engine-level details now \ud83d\udc4c Let\u2019s break it piece by piece.</p>"},{"location":"Interview/empty_js/#1-hoisting-pre-scan","title":"1. Hoisting = Pre-scan","text":"<p>Yes \u2705 \u2014 During the creation phase of the Global Execution Context (GEC), JavaScript scans the whole code first:</p> <ul> <li>All variables declared with <code>var</code> are hoisted (allocated in memory, initialized with <code>undefined</code>).</li> <li>All functions declared with <code>function</code> are hoisted (stored in memory with the full function body).</li> <li><code>let</code> and <code>const</code> are also hoisted but placed in a temporal dead zone (TDZ) \u2014 they are not accessible until execution reaches their line.</li> </ul> <p>\ud83d\udc49 This happens inside the Global Execution Context (GEC).</p>"},{"location":"Interview/empty_js/#2-why-window-and-this-are-the-same-in-browsers","title":"2. Why <code>window</code> and <code>this</code> are the same in browsers?","text":"<p>In browsers:</p> <ul> <li>The global object is called <code>window</code>.</li> <li>In the global scope, the keyword <code>this</code> points to the global object.</li> </ul> <p>So:</p> <pre><code>console.log(window === this); // true\n</code></pre> <p>This is because the JS engine makes <code>this</code> equal to the global object in the global execution context.</p>"},{"location":"Interview/empty_js/#3-when-are-window-and-this-different","title":"3. When are <code>window</code> and <code>this</code> different?","text":"<ul> <li>Inside functions in non\u2013strict mode:</li> </ul> <pre><code>function test() {\n  console.log(this); // window\n}\ntest();\n</code></pre> <ul> <li>Inside functions in strict mode:</li> </ul> <pre><code>'use strict';\nfunction test() {\n  console.log(this); // undefined\n}\ntest();\n</code></pre> <ul> <li>Inside an object method:</li> </ul> <pre><code>const obj = {\n  name: \"Aditya\",\n  show: function() {\n    console.log(this.name); // \"Aditya\"\n  }\n};\nobj.show();\n</code></pre> <ul> <li>In Node.js:   The global object is <code>global</code>, not <code>window</code>, and in the global scope <code>this</code> is not equal to <code>global</code> \u2014 instead it\u2019s <code>{}</code> (an empty object).</li> </ul>"},{"location":"Interview/empty_js/#4-what-is-memory-heap","title":"4. What is Memory Heap?","text":"<p>Think of JS memory in two main parts:</p> <ul> <li>Call Stack \u2192 keeps track of execution order (functions).</li> <li>Heap \u2192 unstructured memory storage for objects, arrays, functions.</li> </ul> <p>\ud83d\udce6 Example:</p> <pre><code>let x = 10;              // stored in Call Stack\nlet obj = { a: 1 };      // reference stored in Call Stack\n                         // actual {a:1} stored in Heap\n</code></pre>"},{"location":"Interview/empty_js/#5-does-memory-heap-contain-window-and-this","title":"5. Does Memory Heap contain <code>window</code> and <code>this</code>?","text":"<p>Yes \u2705</p> <ul> <li>The <code>window</code> object is a huge object (with <code>alert</code>, <code>document</code>, <code>console</code>, etc.) \u2014 stored in the Heap.</li> <li>A reference to it is assigned to <code>this</code> in the Global Execution Context.</li> <li>In the Call Stack \u2192 the GEC holds a reference to the global object (<code>window</code>).</li> </ul> <p>So:</p> <ul> <li>Heap: actual <code>window</code> object (all browser APIs).</li> <li>Stack: Execution Context that holds a pointer to it via <code>this</code>.</li> </ul>"},{"location":"Interview/empty_js/#summary","title":"\ud83d\udd11 Summary:","text":"<ul> <li>Hoisting = pre-scan to allocate memory inside Global Execution Context.</li> <li>In browsers \u2192 <code>window</code> = global object; <code>this</code> in global scope points to it.</li> <li>They differ in strict mode, inside functions, or in Node.js.</li> <li>Heap stores big objects like <code>window</code>; Call Stack stores execution contexts (which reference those heap objects).</li> </ul>"},{"location":"Interview/empty_js/#would-you-like-me-to-draw-a-diagram-showing-how-the-stack-heap-global-object-window-this-are-connected-during-global-execution","title":"Would you like me to draw a diagram showing how the stack + heap + global object (<code>window</code>) + <code>this</code> are connected during global execution?","text":""}]}